/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */

/// Apiv1pendingTxsTransaction : BlockTransactionVerbose has readable transaction data for transactions inside a block. It differs from Transaction in that it includes metadata for transaction inputs and the calculated coinhour fee spent by the block

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Apiv1pendingTxsTransaction {
  #[serde(rename = "outputs")]
  outputs: Option<Vec<::models::Apiv1exploreraddressOutputs>>,
  #[serde(rename = "inner_hash")]
  inner_hash: Option<String>,
  #[serde(rename = "inputs")]
  inputs: Option<Vec<String>>,
  #[serde(rename = "sigs")]
  sigs: Option<Vec<String>>,
  #[serde(rename = "length")]
  length: Option<i32>,
  #[serde(rename = "txid")]
  txid: Option<String>,
  #[serde(rename = "type")]
  _type: Option<i32>,
  #[serde(rename = "timestamp")]
  timestamp: Option<i32>
}

impl Apiv1pendingTxsTransaction {
  /// BlockTransactionVerbose has readable transaction data for transactions inside a block. It differs from Transaction in that it includes metadata for transaction inputs and the calculated coinhour fee spent by the block
  pub fn new() -> Apiv1pendingTxsTransaction {
    Apiv1pendingTxsTransaction {
      outputs: None,
      inner_hash: None,
      inputs: None,
      sigs: None,
      length: None,
      txid: None,
      _type: None,
      timestamp: None
    }
  }

  pub fn set_outputs(&mut self, outputs: Vec<::models::Apiv1exploreraddressOutputs>) {
    self.outputs = Some(outputs);
  }

  pub fn with_outputs(mut self, outputs: Vec<::models::Apiv1exploreraddressOutputs>) -> Apiv1pendingTxsTransaction {
    self.outputs = Some(outputs);
    self
  }

  pub fn outputs(&self) -> Option<&Vec<::models::Apiv1exploreraddressOutputs>> {
    self.outputs.as_ref()
  }

  pub fn reset_outputs(&mut self) {
    self.outputs = None;
  }

  pub fn set_inner_hash(&mut self, inner_hash: String) {
    self.inner_hash = Some(inner_hash);
  }

  pub fn with_inner_hash(mut self, inner_hash: String) -> Apiv1pendingTxsTransaction {
    self.inner_hash = Some(inner_hash);
    self
  }

  pub fn inner_hash(&self) -> Option<&String> {
    self.inner_hash.as_ref()
  }

  pub fn reset_inner_hash(&mut self) {
    self.inner_hash = None;
  }

  pub fn set_inputs(&mut self, inputs: Vec<String>) {
    self.inputs = Some(inputs);
  }

  pub fn with_inputs(mut self, inputs: Vec<String>) -> Apiv1pendingTxsTransaction {
    self.inputs = Some(inputs);
    self
  }

  pub fn inputs(&self) -> Option<&Vec<String>> {
    self.inputs.as_ref()
  }

  pub fn reset_inputs(&mut self) {
    self.inputs = None;
  }

  pub fn set_sigs(&mut self, sigs: Vec<String>) {
    self.sigs = Some(sigs);
  }

  pub fn with_sigs(mut self, sigs: Vec<String>) -> Apiv1pendingTxsTransaction {
    self.sigs = Some(sigs);
    self
  }

  pub fn sigs(&self) -> Option<&Vec<String>> {
    self.sigs.as_ref()
  }

  pub fn reset_sigs(&mut self) {
    self.sigs = None;
  }

  pub fn set_length(&mut self, length: i32) {
    self.length = Some(length);
  }

  pub fn with_length(mut self, length: i32) -> Apiv1pendingTxsTransaction {
    self.length = Some(length);
    self
  }

  pub fn length(&self) -> Option<&i32> {
    self.length.as_ref()
  }

  pub fn reset_length(&mut self) {
    self.length = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> Apiv1pendingTxsTransaction {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

  pub fn set__type(&mut self, _type: i32) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: i32) -> Apiv1pendingTxsTransaction {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&i32> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_timestamp(&mut self, timestamp: i32) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: i32) -> Apiv1pendingTxsTransaction {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&i32> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

}



