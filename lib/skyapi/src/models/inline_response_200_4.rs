/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2004 {
  #[serde(rename = "announced")]
  announced: Option<String>,
  #[serde(rename = "is_valid")]
  is_valid: Option<bool>,
  #[serde(rename = "checked")]
  checked: Option<String>,
  #[serde(rename = "received")]
  received: Option<String>,
  #[serde(rename = "transaction")]
  transaction: Option<::models::Apiv1pendingTxsTransaction>
}

impl InlineResponse2004 {
  pub fn new() -> InlineResponse2004 {
    InlineResponse2004 {
      announced: None,
      is_valid: None,
      checked: None,
      received: None,
      transaction: None
    }
  }

  pub fn set_announced(&mut self, announced: String) {
    self.announced = Some(announced);
  }

  pub fn with_announced(mut self, announced: String) -> InlineResponse2004 {
    self.announced = Some(announced);
    self
  }

  pub fn announced(&self) -> Option<&String> {
    self.announced.as_ref()
  }

  pub fn reset_announced(&mut self) {
    self.announced = None;
  }

  pub fn set_is_valid(&mut self, is_valid: bool) {
    self.is_valid = Some(is_valid);
  }

  pub fn with_is_valid(mut self, is_valid: bool) -> InlineResponse2004 {
    self.is_valid = Some(is_valid);
    self
  }

  pub fn is_valid(&self) -> Option<&bool> {
    self.is_valid.as_ref()
  }

  pub fn reset_is_valid(&mut self) {
    self.is_valid = None;
  }

  pub fn set_checked(&mut self, checked: String) {
    self.checked = Some(checked);
  }

  pub fn with_checked(mut self, checked: String) -> InlineResponse2004 {
    self.checked = Some(checked);
    self
  }

  pub fn checked(&self) -> Option<&String> {
    self.checked.as_ref()
  }

  pub fn reset_checked(&mut self) {
    self.checked = None;
  }

  pub fn set_received(&mut self, received: String) {
    self.received = Some(received);
  }

  pub fn with_received(mut self, received: String) -> InlineResponse2004 {
    self.received = Some(received);
    self
  }

  pub fn received(&self) -> Option<&String> {
    self.received.as_ref()
  }

  pub fn reset_received(&mut self) {
    self.received = None;
  }

  pub fn set_transaction(&mut self, transaction: ::models::Apiv1pendingTxsTransaction) {
    self.transaction = Some(transaction);
  }

  pub fn with_transaction(mut self, transaction: ::models::Apiv1pendingTxsTransaction) -> InlineResponse2004 {
    self.transaction = Some(transaction);
    self
  }

  pub fn transaction(&self) -> Option<&::models::Apiv1pendingTxsTransaction> {
    self.transaction.as_ref()
  }

  pub fn reset_transaction(&mut self) {
    self.transaction = None;
  }

}



