/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */

/// InlineResponse2003UnconfirmedVerifyTransaction : Represent unconfirmed transactions

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2003UnconfirmedVerifyTransaction {
  #[serde(rename = "burn_factor")]
  burn_factor: Option<i32>,
  #[serde(rename = "max_transaction_size")]
  max_transaction_size: Option<i32>,
  #[serde(rename = "max_decimals")]
  max_decimals: Option<i32>
}

impl InlineResponse2003UnconfirmedVerifyTransaction {
  /// Represent unconfirmed transactions
  pub fn new() -> InlineResponse2003UnconfirmedVerifyTransaction {
    InlineResponse2003UnconfirmedVerifyTransaction {
      burn_factor: None,
      max_transaction_size: None,
      max_decimals: None
    }
  }

  pub fn set_burn_factor(&mut self, burn_factor: i32) {
    self.burn_factor = Some(burn_factor);
  }

  pub fn with_burn_factor(mut self, burn_factor: i32) -> InlineResponse2003UnconfirmedVerifyTransaction {
    self.burn_factor = Some(burn_factor);
    self
  }

  pub fn burn_factor(&self) -> Option<&i32> {
    self.burn_factor.as_ref()
  }

  pub fn reset_burn_factor(&mut self) {
    self.burn_factor = None;
  }

  pub fn set_max_transaction_size(&mut self, max_transaction_size: i32) {
    self.max_transaction_size = Some(max_transaction_size);
  }

  pub fn with_max_transaction_size(mut self, max_transaction_size: i32) -> InlineResponse2003UnconfirmedVerifyTransaction {
    self.max_transaction_size = Some(max_transaction_size);
    self
  }

  pub fn max_transaction_size(&self) -> Option<&i32> {
    self.max_transaction_size.as_ref()
  }

  pub fn reset_max_transaction_size(&mut self) {
    self.max_transaction_size = None;
  }

  pub fn set_max_decimals(&mut self, max_decimals: i32) {
    self.max_decimals = Some(max_decimals);
  }

  pub fn with_max_decimals(mut self, max_decimals: i32) -> InlineResponse2003UnconfirmedVerifyTransaction {
    self.max_decimals = Some(max_decimals);
    self
  }

  pub fn max_decimals(&self) -> Option<&i32> {
    self.max_decimals.as_ref()
  }

  pub fn reset_max_decimals(&mut self) {
    self.max_decimals = None;
  }

}



