/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Apiv1exploreraddressStatus {
  #[serde(rename = "unconfirmed")]
  unconfirmed: Option<bool>,
  #[serde(rename = "block_seq")]
  block_seq: Option<i64>,
  #[serde(rename = "label")]
  label: Option<i64>,
  #[serde(rename = "confirmed")]
  confirmed: Option<bool>
}

impl Apiv1exploreraddressStatus {
  pub fn new() -> Apiv1exploreraddressStatus {
    Apiv1exploreraddressStatus {
      unconfirmed: None,
      block_seq: None,
      label: None,
      confirmed: None
    }
  }

  pub fn set_unconfirmed(&mut self, unconfirmed: bool) {
    self.unconfirmed = Some(unconfirmed);
  }

  pub fn with_unconfirmed(mut self, unconfirmed: bool) -> Apiv1exploreraddressStatus {
    self.unconfirmed = Some(unconfirmed);
    self
  }

  pub fn unconfirmed(&self) -> Option<&bool> {
    self.unconfirmed.as_ref()
  }

  pub fn reset_unconfirmed(&mut self) {
    self.unconfirmed = None;
  }

  pub fn set_block_seq(&mut self, block_seq: i64) {
    self.block_seq = Some(block_seq);
  }

  pub fn with_block_seq(mut self, block_seq: i64) -> Apiv1exploreraddressStatus {
    self.block_seq = Some(block_seq);
    self
  }

  pub fn block_seq(&self) -> Option<&i64> {
    self.block_seq.as_ref()
  }

  pub fn reset_block_seq(&mut self) {
    self.block_seq = None;
  }

  pub fn set_label(&mut self, label: i64) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: i64) -> Apiv1exploreraddressStatus {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&i64> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_confirmed(&mut self, confirmed: bool) {
    self.confirmed = Some(confirmed);
  }

  pub fn with_confirmed(mut self, confirmed: bool) -> Apiv1exploreraddressStatus {
    self.confirmed = Some(confirmed);
    self
  }

  pub fn confirmed(&self) -> Option<&bool> {
    self.confirmed.as_ref()
  }

  pub fn reset_confirmed(&mut self) {
    self.confirmed = None;
  }

}



