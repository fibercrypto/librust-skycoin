/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Apiv1wallettransactionWallet {
  #[serde(rename = "unspents")]
  unspents: Option<Vec<String>>,
  #[serde(rename = "addresses")]
  addresses: Option<Vec<String>>,
  #[serde(rename = "password")]
  password: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>
}

impl Apiv1wallettransactionWallet {
  pub fn new() -> Apiv1wallettransactionWallet {
    Apiv1wallettransactionWallet {
      unspents: None,
      addresses: None,
      password: None,
      id: None
    }
  }

  pub fn set_unspents(&mut self, unspents: Vec<String>) {
    self.unspents = Some(unspents);
  }

  pub fn with_unspents(mut self, unspents: Vec<String>) -> Apiv1wallettransactionWallet {
    self.unspents = Some(unspents);
    self
  }

  pub fn unspents(&self) -> Option<&Vec<String>> {
    self.unspents.as_ref()
  }

  pub fn reset_unspents(&mut self) {
    self.unspents = None;
  }

  pub fn set_addresses(&mut self, addresses: Vec<String>) {
    self.addresses = Some(addresses);
  }

  pub fn with_addresses(mut self, addresses: Vec<String>) -> Apiv1wallettransactionWallet {
    self.addresses = Some(addresses);
    self
  }

  pub fn addresses(&self) -> Option<&Vec<String>> {
    self.addresses.as_ref()
  }

  pub fn reset_addresses(&mut self) {
    self.addresses = None;
  }

  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> Apiv1wallettransactionWallet {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Apiv1wallettransactionWallet {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

}



