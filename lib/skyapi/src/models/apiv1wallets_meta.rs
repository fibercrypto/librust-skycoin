/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Apiv1walletsMeta {
  #[serde(rename = "filename")]
  filename: Option<String>,
  #[serde(rename = "encrypted")]
  encrypted: Option<bool>,
  #[serde(rename = "crypto_type")]
  crypto_type: Option<String>,
  #[serde(rename = "label")]
  label: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>,
  #[serde(rename = "coin")]
  coin: Option<String>,
  #[serde(rename = "timestamp")]
  timestamp: Option<i32>
}

impl Apiv1walletsMeta {
  pub fn new() -> Apiv1walletsMeta {
    Apiv1walletsMeta {
      filename: None,
      encrypted: None,
      crypto_type: None,
      label: None,
      _type: None,
      version: None,
      coin: None,
      timestamp: None
    }
  }

  pub fn set_filename(&mut self, filename: String) {
    self.filename = Some(filename);
  }

  pub fn with_filename(mut self, filename: String) -> Apiv1walletsMeta {
    self.filename = Some(filename);
    self
  }

  pub fn filename(&self) -> Option<&String> {
    self.filename.as_ref()
  }

  pub fn reset_filename(&mut self) {
    self.filename = None;
  }

  pub fn set_encrypted(&mut self, encrypted: bool) {
    self.encrypted = Some(encrypted);
  }

  pub fn with_encrypted(mut self, encrypted: bool) -> Apiv1walletsMeta {
    self.encrypted = Some(encrypted);
    self
  }

  pub fn encrypted(&self) -> Option<&bool> {
    self.encrypted.as_ref()
  }

  pub fn reset_encrypted(&mut self) {
    self.encrypted = None;
  }

  pub fn set_crypto_type(&mut self, crypto_type: String) {
    self.crypto_type = Some(crypto_type);
  }

  pub fn with_crypto_type(mut self, crypto_type: String) -> Apiv1walletsMeta {
    self.crypto_type = Some(crypto_type);
    self
  }

  pub fn crypto_type(&self) -> Option<&String> {
    self.crypto_type.as_ref()
  }

  pub fn reset_crypto_type(&mut self) {
    self.crypto_type = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> Apiv1walletsMeta {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Apiv1walletsMeta {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> Apiv1walletsMeta {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_coin(&mut self, coin: String) {
    self.coin = Some(coin);
  }

  pub fn with_coin(mut self, coin: String) -> Apiv1walletsMeta {
    self.coin = Some(coin);
    self
  }

  pub fn coin(&self) -> Option<&String> {
    self.coin.as_ref()
  }

  pub fn reset_coin(&mut self) {
    self.coin = None;
  }

  pub fn set_timestamp(&mut self, timestamp: i32) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: i32) -> Apiv1walletsMeta {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&i32> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

}



