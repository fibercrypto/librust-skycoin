/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse200 {
  #[serde(rename = "hours")]
  hours: Option<i64>,
  #[serde(rename = "coins")]
  coins: Option<i32>,
  #[serde(rename = "uxid")]
  uxid: Option<String>,
  #[serde(rename = "owner_address")]
  owner_address: Option<String>,
  #[serde(rename = "spent_block_seq")]
  spent_block_seq: Option<i32>,
  #[serde(rename = "spent_tx")]
  spent_tx: Option<String>,
  #[serde(rename = "time")]
  time: Option<i64>,
  #[serde(rename = "src_block_seq")]
  src_block_seq: Option<i64>,
  #[serde(rename = "src_tx")]
  src_tx: Option<String>
}

impl InlineResponse200 {
  pub fn new() -> InlineResponse200 {
    InlineResponse200 {
      hours: None,
      coins: None,
      uxid: None,
      owner_address: None,
      spent_block_seq: None,
      spent_tx: None,
      time: None,
      src_block_seq: None,
      src_tx: None
    }
  }

  pub fn set_hours(&mut self, hours: i64) {
    self.hours = Some(hours);
  }

  pub fn with_hours(mut self, hours: i64) -> InlineResponse200 {
    self.hours = Some(hours);
    self
  }

  pub fn hours(&self) -> Option<&i64> {
    self.hours.as_ref()
  }

  pub fn reset_hours(&mut self) {
    self.hours = None;
  }

  pub fn set_coins(&mut self, coins: i32) {
    self.coins = Some(coins);
  }

  pub fn with_coins(mut self, coins: i32) -> InlineResponse200 {
    self.coins = Some(coins);
    self
  }

  pub fn coins(&self) -> Option<&i32> {
    self.coins.as_ref()
  }

  pub fn reset_coins(&mut self) {
    self.coins = None;
  }

  pub fn set_uxid(&mut self, uxid: String) {
    self.uxid = Some(uxid);
  }

  pub fn with_uxid(mut self, uxid: String) -> InlineResponse200 {
    self.uxid = Some(uxid);
    self
  }

  pub fn uxid(&self) -> Option<&String> {
    self.uxid.as_ref()
  }

  pub fn reset_uxid(&mut self) {
    self.uxid = None;
  }

  pub fn set_owner_address(&mut self, owner_address: String) {
    self.owner_address = Some(owner_address);
  }

  pub fn with_owner_address(mut self, owner_address: String) -> InlineResponse200 {
    self.owner_address = Some(owner_address);
    self
  }

  pub fn owner_address(&self) -> Option<&String> {
    self.owner_address.as_ref()
  }

  pub fn reset_owner_address(&mut self) {
    self.owner_address = None;
  }

  pub fn set_spent_block_seq(&mut self, spent_block_seq: i32) {
    self.spent_block_seq = Some(spent_block_seq);
  }

  pub fn with_spent_block_seq(mut self, spent_block_seq: i32) -> InlineResponse200 {
    self.spent_block_seq = Some(spent_block_seq);
    self
  }

  pub fn spent_block_seq(&self) -> Option<&i32> {
    self.spent_block_seq.as_ref()
  }

  pub fn reset_spent_block_seq(&mut self) {
    self.spent_block_seq = None;
  }

  pub fn set_spent_tx(&mut self, spent_tx: String) {
    self.spent_tx = Some(spent_tx);
  }

  pub fn with_spent_tx(mut self, spent_tx: String) -> InlineResponse200 {
    self.spent_tx = Some(spent_tx);
    self
  }

  pub fn spent_tx(&self) -> Option<&String> {
    self.spent_tx.as_ref()
  }

  pub fn reset_spent_tx(&mut self) {
    self.spent_tx = None;
  }

  pub fn set_time(&mut self, time: i64) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i64) -> InlineResponse200 {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i64> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_src_block_seq(&mut self, src_block_seq: i64) {
    self.src_block_seq = Some(src_block_seq);
  }

  pub fn with_src_block_seq(mut self, src_block_seq: i64) -> InlineResponse200 {
    self.src_block_seq = Some(src_block_seq);
    self
  }

  pub fn src_block_seq(&self) -> Option<&i64> {
    self.src_block_seq.as_ref()
  }

  pub fn reset_src_block_seq(&mut self) {
    self.src_block_seq = None;
  }

  pub fn set_src_tx(&mut self, src_tx: String) {
    self.src_tx = Some(src_tx);
  }

  pub fn with_src_tx(mut self, src_tx: String) -> InlineResponse200 {
    self.src_tx = Some(src_tx);
    self
  }

  pub fn src_tx(&self) -> Option<&String> {
    self.src_tx.as_ref()
  }

  pub fn reset_src_tx(&mut self) {
    self.src_tx = None;
  }

}



