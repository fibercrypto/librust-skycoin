/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2003 {
  #[serde(rename = "last_received")]
  last_received: Option<i64>,
  #[serde(rename = "last_sent")]
  last_sent: Option<i64>,
  #[serde(rename = "outgoing")]
  outgoing: Option<bool>,
  #[serde(rename = "mirror")]
  mirror: Option<i32>,
  #[serde(rename = "address")]
  address: Option<String>,
  #[serde(rename = "listen_port")]
  listen_port: Option<i32>,
  #[serde(rename = "is_trusted_peer")]
  is_trusted_peer: Option<bool>,
  #[serde(rename = "connected_at")]
  connected_at: Option<i64>,
  #[serde(rename = "unconfirmed_verify_transaction")]
  unconfirmed_verify_transaction: Option<::models::InlineResponse2003UnconfirmedVerifyTransaction>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "user_agent")]
  user_agent: Option<String>,
  #[serde(rename = "height")]
  height: Option<i64>
}

impl InlineResponse2003 {
  pub fn new() -> InlineResponse2003 {
    InlineResponse2003 {
      last_received: None,
      last_sent: None,
      outgoing: None,
      mirror: None,
      address: None,
      listen_port: None,
      is_trusted_peer: None,
      connected_at: None,
      unconfirmed_verify_transaction: None,
      id: None,
      state: None,
      user_agent: None,
      height: None
    }
  }

  pub fn set_last_received(&mut self, last_received: i64) {
    self.last_received = Some(last_received);
  }

  pub fn with_last_received(mut self, last_received: i64) -> InlineResponse2003 {
    self.last_received = Some(last_received);
    self
  }

  pub fn last_received(&self) -> Option<&i64> {
    self.last_received.as_ref()
  }

  pub fn reset_last_received(&mut self) {
    self.last_received = None;
  }

  pub fn set_last_sent(&mut self, last_sent: i64) {
    self.last_sent = Some(last_sent);
  }

  pub fn with_last_sent(mut self, last_sent: i64) -> InlineResponse2003 {
    self.last_sent = Some(last_sent);
    self
  }

  pub fn last_sent(&self) -> Option<&i64> {
    self.last_sent.as_ref()
  }

  pub fn reset_last_sent(&mut self) {
    self.last_sent = None;
  }

  pub fn set_outgoing(&mut self, outgoing: bool) {
    self.outgoing = Some(outgoing);
  }

  pub fn with_outgoing(mut self, outgoing: bool) -> InlineResponse2003 {
    self.outgoing = Some(outgoing);
    self
  }

  pub fn outgoing(&self) -> Option<&bool> {
    self.outgoing.as_ref()
  }

  pub fn reset_outgoing(&mut self) {
    self.outgoing = None;
  }

  pub fn set_mirror(&mut self, mirror: i32) {
    self.mirror = Some(mirror);
  }

  pub fn with_mirror(mut self, mirror: i32) -> InlineResponse2003 {
    self.mirror = Some(mirror);
    self
  }

  pub fn mirror(&self) -> Option<&i32> {
    self.mirror.as_ref()
  }

  pub fn reset_mirror(&mut self) {
    self.mirror = None;
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> InlineResponse2003 {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_listen_port(&mut self, listen_port: i32) {
    self.listen_port = Some(listen_port);
  }

  pub fn with_listen_port(mut self, listen_port: i32) -> InlineResponse2003 {
    self.listen_port = Some(listen_port);
    self
  }

  pub fn listen_port(&self) -> Option<&i32> {
    self.listen_port.as_ref()
  }

  pub fn reset_listen_port(&mut self) {
    self.listen_port = None;
  }

  pub fn set_is_trusted_peer(&mut self, is_trusted_peer: bool) {
    self.is_trusted_peer = Some(is_trusted_peer);
  }

  pub fn with_is_trusted_peer(mut self, is_trusted_peer: bool) -> InlineResponse2003 {
    self.is_trusted_peer = Some(is_trusted_peer);
    self
  }

  pub fn is_trusted_peer(&self) -> Option<&bool> {
    self.is_trusted_peer.as_ref()
  }

  pub fn reset_is_trusted_peer(&mut self) {
    self.is_trusted_peer = None;
  }

  pub fn set_connected_at(&mut self, connected_at: i64) {
    self.connected_at = Some(connected_at);
  }

  pub fn with_connected_at(mut self, connected_at: i64) -> InlineResponse2003 {
    self.connected_at = Some(connected_at);
    self
  }

  pub fn connected_at(&self) -> Option<&i64> {
    self.connected_at.as_ref()
  }

  pub fn reset_connected_at(&mut self) {
    self.connected_at = None;
  }

  pub fn set_unconfirmed_verify_transaction(&mut self, unconfirmed_verify_transaction: ::models::InlineResponse2003UnconfirmedVerifyTransaction) {
    self.unconfirmed_verify_transaction = Some(unconfirmed_verify_transaction);
  }

  pub fn with_unconfirmed_verify_transaction(mut self, unconfirmed_verify_transaction: ::models::InlineResponse2003UnconfirmedVerifyTransaction) -> InlineResponse2003 {
    self.unconfirmed_verify_transaction = Some(unconfirmed_verify_transaction);
    self
  }

  pub fn unconfirmed_verify_transaction(&self) -> Option<&::models::InlineResponse2003UnconfirmedVerifyTransaction> {
    self.unconfirmed_verify_transaction.as_ref()
  }

  pub fn reset_unconfirmed_verify_transaction(&mut self) {
    self.unconfirmed_verify_transaction = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> InlineResponse2003 {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> InlineResponse2003 {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_user_agent(&mut self, user_agent: String) {
    self.user_agent = Some(user_agent);
  }

  pub fn with_user_agent(mut self, user_agent: String) -> InlineResponse2003 {
    self.user_agent = Some(user_agent);
    self
  }

  pub fn user_agent(&self) -> Option<&String> {
    self.user_agent.as_ref()
  }

  pub fn reset_user_agent(&mut self) {
    self.user_agent = None;
  }

  pub fn set_height(&mut self, height: i64) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i64) -> InlineResponse2003 {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i64> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

}



